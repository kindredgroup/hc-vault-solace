// Code generated by go-swagger; DO NOT EDIT.

package all

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new all API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for all API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {

	CreateMsgVpnClientUsername(params *CreateMsgVpnClientUsernameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMsgVpnClientUsernameOK, error)

	CreateMsgVpnClientUsernameAttribute(params *CreateMsgVpnClientUsernameAttributeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMsgVpnClientUsernameAttributeOK, error)

	DeleteMsgVpnClientUsername(params *DeleteMsgVpnClientUsernameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMsgVpnClientUsernameOK, error)

	DeleteMsgVpnClientUsernameAttribute(params *DeleteMsgVpnClientUsernameAttributeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMsgVpnClientUsernameAttributeOK, error)

	GetMsgVpnClientUsername(params *GetMsgVpnClientUsernameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMsgVpnClientUsernameOK, error)

	GetMsgVpnClientUsernameAttribute(params *GetMsgVpnClientUsernameAttributeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMsgVpnClientUsernameAttributeOK, error)

	GetMsgVpnClientUsernameAttributes(params *GetMsgVpnClientUsernameAttributesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMsgVpnClientUsernameAttributesOK, error)

	GetMsgVpnClientUsernames(params *GetMsgVpnClientUsernamesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMsgVpnClientUsernamesOK, error)
}

/*
	CreateMsgVpnClientUsername creates a client username object

	Create a Client Username object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

A client is only authorized to connect to a Message VPN that is associated with a Client Username that the client has been assigned.

Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
clientUsername|x|x||||
msgVpnName|x||x|||
password||||x||x

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) CreateMsgVpnClientUsername(params *CreateMsgVpnClientUsernameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMsgVpnClientUsernameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMsgVpnClientUsernameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createMsgVpnClientUsername",
		Method:             "POST",
		PathPattern:        "/msgVpns/{msgVpnName}/clientUsernames",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMsgVpnClientUsernameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMsgVpnClientUsernameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateMsgVpnClientUsernameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CreateMsgVpnClientUsernameAttribute creates a client username attribute object

	Create a Client Username Attribute object. Any attribute missing from the request will be set to its default value. The creation of instances of this object are synchronized to HA mates and replication sites via config-sync.

A ClientUsername Attribute is a key+value pair that can be used to locate a client username, for example when using client certificate mapping.

Attribute|Identifying|Required|Read-Only|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:|:---:|:---:
attributeName|x|x||||
attributeValue|x|x||||
clientUsername|x||x|||
msgVpnName|x||x|||

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.27.
*/
func (a *Client) CreateMsgVpnClientUsernameAttribute(params *CreateMsgVpnClientUsernameAttributeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMsgVpnClientUsernameAttributeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMsgVpnClientUsernameAttributeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createMsgVpnClientUsernameAttribute",
		Method:             "POST",
		PathPattern:        "/msgVpns/{msgVpnName}/clientUsernames/{clientUsername}/attributes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMsgVpnClientUsernameAttributeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMsgVpnClientUsernameAttributeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateMsgVpnClientUsernameAttributeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	DeleteMsgVpnClientUsername deletes a client username object

	Delete a Client Username object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

A client is only authorized to connect to a Message VPN that is associated with a Client Username that the client has been assigned.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) DeleteMsgVpnClientUsername(params *DeleteMsgVpnClientUsernameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMsgVpnClientUsernameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMsgVpnClientUsernameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMsgVpnClientUsername",
		Method:             "DELETE",
		PathPattern:        "/msgVpns/{msgVpnName}/clientUsernames/{clientUsername}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMsgVpnClientUsernameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMsgVpnClientUsernameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteMsgVpnClientUsernameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	DeleteMsgVpnClientUsernameAttribute deletes a client username attribute object

	Delete a Client Username Attribute object. The deletion of instances of this object are synchronized to HA mates and replication sites via config-sync.

A ClientUsername Attribute is a key+value pair that can be used to locate a client username, for example when using client certificate mapping.

A SEMP client authorized with a minimum access scope/level of "vpn/read-write" is required to perform this operation.

This has been available since 2.27.
*/
func (a *Client) DeleteMsgVpnClientUsernameAttribute(params *DeleteMsgVpnClientUsernameAttributeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMsgVpnClientUsernameAttributeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMsgVpnClientUsernameAttributeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMsgVpnClientUsernameAttribute",
		Method:             "DELETE",
		PathPattern:        "/msgVpns/{msgVpnName}/clientUsernames/{clientUsername}/attributes/{attributeName},{attributeValue}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMsgVpnClientUsernameAttributeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMsgVpnClientUsernameAttributeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteMsgVpnClientUsernameAttributeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetMsgVpnClientUsername gets a client username object

	Get a Client Username object.

A client is only authorized to connect to a Message VPN that is associated with a Client Username that the client has been assigned.

Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
clientUsername|x|||
msgVpnName|x|||
password||x||x

A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnClientUsername(params *GetMsgVpnClientUsernameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMsgVpnClientUsernameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnClientUsernameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMsgVpnClientUsername",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/clientUsernames/{clientUsername}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnClientUsernameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMsgVpnClientUsernameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMsgVpnClientUsernameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetMsgVpnClientUsernameAttribute gets a client username attribute object

	Get a Client Username Attribute object.

A ClientUsername Attribute is a key+value pair that can be used to locate a client username, for example when using client certificate mapping.

Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
attributeName|x|||
attributeValue|x|||
clientUsername|x|||
msgVpnName|x|||

A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.27.
*/
func (a *Client) GetMsgVpnClientUsernameAttribute(params *GetMsgVpnClientUsernameAttributeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMsgVpnClientUsernameAttributeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnClientUsernameAttributeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMsgVpnClientUsernameAttribute",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/clientUsernames/{clientUsername}/attributes/{attributeName},{attributeValue}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnClientUsernameAttributeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMsgVpnClientUsernameAttributeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMsgVpnClientUsernameAttributeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetMsgVpnClientUsernameAttributes gets a list of client username attribute objects

	Get a list of Client Username Attribute objects.

A ClientUsername Attribute is a key+value pair that can be used to locate a client username, for example when using client certificate mapping.

Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
attributeName|x|||
attributeValue|x|||
clientUsername|x|||
msgVpnName|x|||

A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.27.
*/
func (a *Client) GetMsgVpnClientUsernameAttributes(params *GetMsgVpnClientUsernameAttributesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMsgVpnClientUsernameAttributesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnClientUsernameAttributesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMsgVpnClientUsernameAttributes",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/clientUsernames/{clientUsername}/attributes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnClientUsernameAttributesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMsgVpnClientUsernameAttributesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMsgVpnClientUsernameAttributesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetMsgVpnClientUsernames gets a list of client username objects

	Get a list of Client Username objects.

A client is only authorized to connect to a Message VPN that is associated with a Client Username that the client has been assigned.

Attribute|Identifying|Write-Only|Deprecated|Opaque
:---|:---:|:---:|:---:|:---:
clientUsername|x|||
msgVpnName|x|||
password||x||x

A SEMP client authorized with a minimum access scope/level of "vpn/read-only" is required to perform this operation.

This has been available since 2.0.
*/
func (a *Client) GetMsgVpnClientUsernames(params *GetMsgVpnClientUsernamesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMsgVpnClientUsernamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMsgVpnClientUsernamesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMsgVpnClientUsernames",
		Method:             "GET",
		PathPattern:        "/msgVpns/{msgVpnName}/clientUsernames",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMsgVpnClientUsernamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMsgVpnClientUsernamesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMsgVpnClientUsernamesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
